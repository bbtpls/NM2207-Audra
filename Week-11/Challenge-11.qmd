---
title: "Challenge-11"
author: Chua Jieh Yih Audra
format: html
editor: visual
---

#### Setup/ Procuring data

```{r}
library(httr)
library(jsonlite)
library(tidyverse)
historic_state_data_url <- "https://api.covidactnow.org/v2/states.timeseries.json?apiKey=63a919bf96cb477aa6be408c71fec11a"
raw_data <- GET(historic_state_data_url)
```

#### Extracting data

```{r}
data <- fromJSON(rawToChar(raw_data$content))
```

#### Explore the data

```{r}
glimpse(data)
```

#### Questions

i\. What is the population in various states of U.S.A?

ii\. What fraction of the population was infected ?

iii\. What fraction of infected persons recovered ?

iv\. What fraction of the population is currently vaccinated ?

v\. What was the transmission-like in the various states ?

vi\. How did the disease progress since it started ?

#### Mapping variables to questions

i\. data\$state , data\$population

ii\. data\$actuals\$cases , data\$state

iii\. data\$actuals\$cases - data\$actuals\$deaths , data\$state

iv\. data\$actuals\$vaccinationsCompleted , data\$state

v\. extract time-series data from the data-frame data

```{r}
time_series <- data %>%
#to unravel the contents of a dataframe within a dataframe, use unnest
unnest(actualsTimeseries) 
```

```{r}
# Creating a new dataframe with needed data
# Save date
time_series_transmission <- tibble(Date=time_series$cdcTransmissionLevelTimeseries[[which(data$state=="CA")]]$date)

# Transmission levels in each state
time_series_transmission$Alaska <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="AK")]]$
cdcTransmissionLevel

time_series_transmission$California <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="CA")]]$cdcTransmissionLevel

time_series_transmission$New_Jersey <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="NJ")]]$cdcTransmissionLevel

time_series_transmission$Tennessee <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="TN")]]$cdcTransmissionLevel

time_series_transmission$District_of_Columbia <- time_series$cdcTransmissionLevelTimeseries[[which(data$state=="DC")]]$cdcTransmissionLevel

print(head(time_series_transmission))
```

\(vi\) time_series\$cases, state

\- Has data of all the states: filter only those rows we need

\- Save the needed data in new list, \`time_series_cases\`

\- Choose a list over the data-frame because the length of data for each state is different (data-frames require all the variables to have the same length, unlike lists)

```{r}
# New data-frame with dates
time_series_cases <- list(Alaska = time_series %>% filter(state=="AK") %>% select(date,cases))

# Cases of each state
time_series_cases$California <- time_series %>% filter(state=="CA") %>% select(date,cases)

time_series_cases$New_Jersey <- time_series %>% filter(state=="NJ") %>% select(date,cases)

time_series_cases$Tennessee <- time_series %>% filter(state=="TN") %>% select(date,cases)

time_series_cases$District_of_Columbia <- time_series %>% filter(state=="DC") %>% select(date,cases)
```

#### Analysing data

\(i\) Bar plot:

```{r}
ggplot(data, aes(x=state,y=population)) + geom_bar(stat="identity") +labs(x="States",y="Population") + theme_bw()
```

\(ii\) Scatter plot:

```{r}
ggplot(data, aes(x=state,y=(data$actuals$cases/population))) + geom_bar(stat="identity") + labs(x="States",y="Infected (%)")+theme_bw()
```

\(v\) Time-series data -- to make it easier to plot, reshape data, then use pivot_longer, and choose fewer dates to plot to prevent crowding on the x axis

```{r}
time_series_transmission[seq(1,1300,by=100),]%>%
  pivot_longer(cols=Alaska:District_of_Columbia,names_to="Countries",values_to="Transmission") %>% 
ggplot(aes(x=Date,y=Transmission,colour=Countries,group=Countries)) +
geom_point(show.legend=TRUE) + labs(x="Date",y="Transmission Level")+theme_bw()
```

\(vi\) To make it easier to plot, reshape data. Since ggplot can only work with dataframes, first create one.

```{r}
data_to_plot <- tibble(Date_Alaska = time_series_cases$Alaska$date[seq(1,1300,by=100)],
Cases_Alaska = time_series_cases$Alaska$cases[seq(1,1300,by=100)],
Date_California = time_series_cases$California$date[seq(1,1300,by=100)],
Cases_California = time_series_cases$California$cases[seq(1,1300,by=100)],
Date_New_Jersey = time_series_cases$New_Jersey$date[seq(1,1300,by=100)],
Cases_New_Jersey = time_series_cases$New_Jersey$cases[seq(1,1300,by=100)],
Date_Tennessee = time_series_cases$Tennessee$date[seq(1,1300,by=100)],
Cases_Tennessee = time_series_cases$Tennessee$cases[seq(1,1300,by=100)],
Date_District_of_Columbia = time_series_cases$District_of_Columbia$date[seq(1,1300,by=100)],
Cases_District_of_Columbia = time_series_cases$District_of_Columbia$cases[seq(1,1300,by=100)])

data_to_plot
```

The data is for different dates; we cannot plot them all in the same plot, because the x axis or the variable \`Date\`, has different values for each state. Therefore, we can only plot them in subplots and not together.

Download cowplot:

```{r}
library(cowplot)
```

Use cowplot:

```{r}
fig1<- ggplot(data_to_plot, aes(x=Date_Alaska,y=Cases_Alaska)) +
geom_point() + labs(x="Date",y="Cases", title="Alaska") + theme_bw()
fig2<- ggplot(data_to_plot, aes(x=Date_California,y=Cases_California)) +
geom_point() + labs(x="Date",y="Cases", title="California") + theme_bw()
fig3<- ggplot(data_to_plot, aes(x=Date_New_Jersey,y=Cases_New_Jersey)) +
geom_point() + labs(x="Date",y="Cases", title="New Jersey") + theme_bw()
fig4<- ggplot(data_to_plot, aes(x=Date_Tennessee,y=Cases_Tennessee)) +
geom_point() + labs(x="Date",y="Cases", title="Tennessee") + theme_bw()
fig5<- ggplot(data_to_plot, aes(x=Date_District_of_Columbia,y=Cases_District_of_Columbia)) +
geom_point() + labs(x="Date",y="Cases", title="District of Columbia") + theme_bw()
plot_grid(fig1 + theme(legend.justification = c(0,1)),
fig2 + theme(legend.justification = c(1,0)),
fig3 + theme(legend.justification = c(0,1)),
fig4 + theme(legend.justification = c(1,0)),
fig5 + theme(legend.justification = c(0,1)),
align = "v", axis = "lr", nrow=3, ncol = 2,labels = LETTERS[1:5],
rel_heights = c(1,1),
label_size = 1000000)
```
