---
title: "Challenge-5"
author: "Chua Jieh Yih Audra"
date: "`r Sys.Date()`"
output:
  pdf_document: default
  html_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Questions
<br>

#### Question-1: Local Variable Shadowing 

Create an R function that defines a global variable called `x` with a value of 5. Inside the function, declare a local variable also named `x` with a value of 10. Print the value of `x` both inside and outside the function to demonstrate shadowing.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
x <- 5

shadow_f <- function() {
  x <- 10
  print(x)
}


shadow_f()
print(x)
```
<br>

#### Question-2: Modify Global Variable

Create an R function that takes an argument and adds it to a global variable called `total`. Call the function multiple times with different arguments to accumulate the values in `total`.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
total <- 0
add_to_total <- function(a) {
  total <<- total + a
}
add_to_total(3)
print(total)
add_to_total(1)
print(total)
add_to_total(4)
print(total)
```
<br>

#### Question-3: Global and Local Interaction 

Write an R program that includes a global variable `total` with an initial value of 100. Create a function that takes an argument, adds it to `total`, and returns the updated `total`. Demonstrate how this function interacts with the global variable.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
total <- 100
add_total_b <- function(b) {
  total <<- total + b
  return(total)
}
cat("Initial total:", total, "\n")
cat("Total after adding", - total + add_to_total(5), ":", total, "\n")
cat("Total now", total, "\n")
```
<br>

#### Question-4: Nested Functions

Define a function `outer_function` that declares a local variable `x` with a value of 5. Inside `outer_function`, define another function `inner_function` that prints the value of `x`. Call both functions to show how the inner function accesses the variable from the outer function's scope.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
outer_function <- function() {
  x <- 5
  
  inner_function <- function() {
    print(x)
  }
  
  inner_function()
}
outer_function()

```
<br>

#### Question-5: Meme Generator Function

Create a function that takes a text input and generates a humorous meme with the text overlaid on an image of your choice. You can use the `magick` package for image manipulation. You can find more details about the commands offered by the package, with some examples of annotating images here: https://cran.r-project.org/web/packages/magick/vignettes/intro.html

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here

library(magick)
memey <- function(pic, txt){
  image_annotate(image_read(pic), txt, size = 200, gravity = "south", color = "red")
}
memey("/Users/dishscitadel/Downloads/IMG_0926.jpeg","ugh")
```
<br>

#### Question-6: Text Analysis Game  

Develop a text analysis game in which the user inputs a sentence, and the R function provides statistics like the number of words, characters, and average word length. Reward the user with a "communication skill level" based on their input.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
txt_game <- function(sentence){
  ln <- lengths(strsplit(sentence, ' '))
  ch <- nchar(sentence)
  w_ln <- ln / ch
  cat("no. of words:", ln, "\n")
  cat("no. of chara:", ch, "\n")
  cat("avg. world length", w_ln, "\n")
  c_skill <- ln + w_ln
  cat("communication skill level:", c_skill, "\n")
}
txt_game("I am a mean person")
```
<br>